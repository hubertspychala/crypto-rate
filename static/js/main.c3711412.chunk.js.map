{"version":3,"sources":["logo.svg","CryptoList.js","Crypto.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoList","props","cryptoList","liElements","map","cryptoObj","className","cssClass","lastRate","htmlArray","currency","symbol","console","log","Crypto","getCryptoData","axios","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","lastCryptoObj","find","newCryptoObj","buy","sell","last","undefined","String","fromCharCode","lastRat","push","Object","entries","filterCryptoList","_inputFilter","value","trim","toUpperCase","filteredCryptoList","filter","includes","this","timerID","setInterval","clearInterval","ref","element","onChange","type","placeholder","Component","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3711412.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c9f33461.svg\";","import React from \"react\";\r\nimport \"./CryptoList.css\";\r\n\r\nfunction CryptoList(props) {\r\n  let cryptoList = props.cryptoList;\r\n\r\n  let liElements = cryptoList.map((cryptoObj) => {\r\n    return (\r\n      <li key={cryptoObj.currency}>\r\n        <span className=\"CryptoLabel\"> Last rate:</span>\r\n        <span className={`CryptoRate ${cryptoObj.cssClass}`}>\r\n          {cryptoObj.lastRate} {cryptoObj.htmlArray}\r\n        </span>\r\n        <span className=\"CurrencyTicker\">{cryptoObj.currency}</span>\r\n        <span className=\"CurrencySymbol\">[{cryptoObj.symbol}]</span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  console.log(cryptoList);\r\n\r\n  return (\r\n    <div className=\"CryptoList\">\r\n      {\" \"}\r\n      <ul className=\"TheList\">{liElements}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CryptoList;\r\n","import React, { Component } from \"react\";\r\nimport \"./Crypto.css\";\r\nimport CryptoList from \"./CryptoList\";\r\n\r\nimport axios from \"axios\";\r\n\r\nclass Crypto extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      cryptoList: [],\r\n      filteredCryptoList: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCryptoData();\r\n    this.timerID = setInterval(() => this.getCryptoData(), 5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  getCryptoData = () => {\r\n    axios.get(\"https://blockchain.info/ticker\").then((res) => {\r\n      console.log(res);\r\n      const tickers = res.data;\r\n\r\n      this.setState((state) => {\r\n        let newCryptoList = [];\r\n\r\n        for (const [ticker, cryptoRate] of Object.entries(tickers)) {\r\n          let lastCryptoObj = state.cryptoList.find((cryptoObj) => {\r\n            return cryptoObj.currency === ticker;\r\n          });\r\n\r\n          let newCryptoObj = {\r\n            currency: ticker,\r\n            symbol: cryptoRate.symbol,\r\n            buy: cryptoRate.buy,\r\n            sell: cryptoRate.sell,\r\n            lastRate: cryptoRate.last,\r\n          };\r\n\r\n          if (lastCryptoObj !== undefined) {\r\n            // code here\r\n            if (newCryptoObj.lastRate > lastCryptoObj.lastRate) {\r\n              newCryptoObj.cssClass = \"green\";\r\n              newCryptoObj.htmlArray = String.fromCharCode(8593);\r\n            } else if (newCryptoObj.lastRate > lastCryptoObj.lastRat) {\r\n              newCryptoObj.cssClass = \"red\";\r\n              newCryptoObj.htmlArray = String.fromCharCode(8595);\r\n            } else {\r\n              newCryptoObj.cssClass = \"blue\";\r\n              newCryptoObj.htmlArray = String.fromCharCode(8596);\r\n            }\r\n          } else {\r\n            newCryptoObj.cssClass = \"blue\";\r\n            newCryptoObj.htmlArray = String.fromCharCode(8596);\r\n          }\r\n\r\n          newCryptoList.push(newCryptoObj);\r\n        }\r\n\r\n        return {\r\n          cryptoList: newCryptoList,\r\n        };\r\n      });\r\n\r\n      this.filterCryptoList();\r\n    });\r\n  };\r\n\r\n  filterCryptoList = () => {\r\n    this._inputFilter.value = this._inputFilter.value.trim().toUpperCase();\r\n\r\n    this.setState((state) => {\r\n      let newFilteredCryptoList = state.cryptoList.filter((cryptoObj) => {\r\n        return cryptoObj.currency.includes(this._inputFilter.value);\r\n      });\r\n\r\n      return {\r\n        filteredCryptoList: newFilteredCryptoList,\r\n      };\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Crypto\">\r\n        <input\r\n          ref={(element) => {\r\n            this._inputFilter = element;\r\n          }}\r\n          onChange={this.filterCryptoList}\r\n          type=\"text\"\r\n          placeholder=\"Filter\"\r\n        />\r\n        <CryptoList cryptoList={this.state.filteredCryptoList} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Crypto;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Crypto from \"./Crypto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>BitCoin Rate ;)</h1>\n      </header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}